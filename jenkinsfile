pipeline {
    agent any
    
    stages {
        stage('Récupérer le code') {
            steps {
                git branch: 'main', url: 'https://github.com/fatoumbodj/pyshop.git'
            }
        }
        
        stage('Installer les dépendances') {
            steps {
                sh 'npm'
               
            }
        }
        
        stage('Tester les unitaires') {
            steps {
                sh 'junit'
            }
        }
        
        stage('Tester la sécurité avec Sonar') {
            steps {
                withSonarQubeEnv('nom_du_serveur_SonarQube') {
                    sh 'sonar-scanner'
                }
            }
        }
        
        stage('Construire l\'image Docker') {
            steps {
                sh 'docker build -t pyshop'
            }
        }
        
        stage('Déployer sur le serveur d\'intégration ou de production') {
            when {
                // si la branche est "dev", on déploie sur le serveur d'intégration
                branch 'dev'
            }
            steps {
                sh 'docker-compose'
            }
            // envoi d'un email en cas d'erreur
            post {
                failure {
                    steps {
                      sh 'mvn -B -DskipTests clean package'
                      script {
                        def server = Artifactory.server 'Artifactory'
                        def buildInfo = Artifactory.newBuildInfo()
                        def rtMaven = Artifactory.newMavenBuild()
                        rtMaven.tool = 'M3'
                        rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
                        rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
                        rtMaven.run pom: 'pom.xml', goals: 'clean install', buildInfo: buildInfo
                        def deployed = rtMaven.deployedVersion
                        if (deployed == null) {
                          mail to: 'mbodjfaticha99@gmail.com', subject: 'Erreur de déploiement', body: 'La version n\'a pas pu être déployée'
                          currentBuild.result = 'FAILURE'
    
   }
            }
        }
        
         stage('Déployer sur les serveurs de production avec Ansible') {
            when {
                // si la branche est "master", on déploie sur les serveurs de production avec Ansible
                branch 'master'
            }
            steps {
                sh 'ansible-playbook nom_du_fichier_playbook.yml'
            }
            // envoi d'un email en cas d'erreur
            post {
                failure {
                    steps {
                          sh 'mvn -B -DskipTests clean package'
                          script {
                            def server = Artifactory.server 'Artifactory'
                            def buildInfo = Artifactory.newBuildInfo()
                            def rtMaven = Artifactory.newMavenBuild()
                            rtMaven.tool = 'M3'
                            rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
                            rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
                            rtMaven.run pom: 'pom.xml', goals: 'clean install', buildInfo: buildInfo
                            def deployed = rtMaven.deployedVersion
                            if (deployed == null) {
                              mail to: 'mbodjfaticha99@gmail.com', subject: 'Erreur de déploiement', body: 'La version n\'a pas pu être déployée'
                              currentBuild.result = 'FAILURE'
                            
       }
            }
        }
    }
}
}
}
}
